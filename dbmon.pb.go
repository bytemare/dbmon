// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dbmon.proto

package dbmon

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request message to pull data from server
type PullRequest struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	NbProbes             int32    `protobuf:"varint,2,opt,name=nbProbes,proto3" json:"nbProbes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullRequest) Reset()         { *m = PullRequest{} }
func (m *PullRequest) String() string { return proto.CompactTextString(m) }
func (*PullRequest) ProtoMessage()    {}
func (*PullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd65e11b6a41de0a, []int{0}
}

func (m *PullRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullRequest.Unmarshal(m, b)
}
func (m *PullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullRequest.Marshal(b, m, deterministic)
}
func (m *PullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullRequest.Merge(m, src)
}
func (m *PullRequest) XXX_Size() int {
	return xxx_messageInfo_PullRequest.Size(m)
}
func (m *PullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullRequest proto.InternalMessageInfo

func (m *PullRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *PullRequest) GetNbProbes() int32 {
	if m != nil {
		return m.NbProbes
	}
	return 0
}

// A report holds a cluster's information for a single request to the cluster
type Probe struct {
	ClusterID            string   `protobuf:"bytes,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Status               string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Timestamp            string   `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Probe) Reset()         { *m = Probe{} }
func (m *Probe) String() string { return proto.CompactTextString(m) }
func (*Probe) ProtoMessage()    {}
func (*Probe) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd65e11b6a41de0a, []int{1}
}

func (m *Probe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Probe.Unmarshal(m, b)
}
func (m *Probe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Probe.Marshal(b, m, deterministic)
}
func (m *Probe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Probe.Merge(m, src)
}
func (m *Probe) XXX_Size() int {
	return xxx_messageInfo_Probe.Size(m)
}
func (m *Probe) XXX_DiscardUnknown() {
	xxx_messageInfo_Probe.DiscardUnknown(m)
}

var xxx_messageInfo_Probe proto.InternalMessageInfo

func (m *Probe) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *Probe) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Probe) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Probe) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

// The response message containing all accumulated reports
type PullReply struct {
	ClusterId            string   `protobuf:"bytes,1,opt,name=clusterId,proto3" json:"clusterId,omitempty"`
	Probes               []*Probe `protobuf:"bytes,3,rep,name=probes,proto3" json:"probes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullReply) Reset()         { *m = PullReply{} }
func (m *PullReply) String() string { return proto.CompactTextString(m) }
func (*PullReply) ProtoMessage()    {}
func (*PullReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd65e11b6a41de0a, []int{2}
}

func (m *PullReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullReply.Unmarshal(m, b)
}
func (m *PullReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullReply.Marshal(b, m, deterministic)
}
func (m *PullReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullReply.Merge(m, src)
}
func (m *PullReply) XXX_Size() int {
	return xxx_messageInfo_PullReply.Size(m)
}
func (m *PullReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PullReply.DiscardUnknown(m)
}

var xxx_messageInfo_PullReply proto.InternalMessageInfo

func (m *PullReply) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *PullReply) GetProbes() []*Probe {
	if m != nil {
		return m.Probes
	}
	return nil
}

func init() {
	proto.RegisterType((*PullRequest)(nil), "dbmon.PullRequest")
	proto.RegisterType((*Probe)(nil), "dbmon.Probe")
	proto.RegisterType((*PullReply)(nil), "dbmon.PullReply")
}

func init() { proto.RegisterFile("dbmon.proto", fileDescriptor_fd65e11b6a41de0a) }

var fileDescriptor_fd65e11b6a41de0a = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x09, 0xf9, 0x11, 0xbe, 0xe9, 0x80, 0xee, 0x80, 0xa2, 0x8a, 0x21, 0xb2, 0x18, 0x3c,
	0x65, 0x28, 0x23, 0x23, 0x95, 0x80, 0x89, 0xca, 0x6f, 0x60, 0x37, 0x96, 0x40, 0x38, 0xb5, 0x89,
	0xaf, 0x87, 0xbe, 0x3d, 0xaa, 0x5d, 0x5a, 0x60, 0x61, 0xbb, 0xe7, 0xd8, 0xfa, 0xf4, 0xe9, 0x40,
	0x3b, 0xea, 0xc9, 0xed, 0x06, 0x3f, 0x3b, 0x72, 0x58, 0xa7, 0xc0, 0x9f, 0xa0, 0xdd, 0x44, 0x6b,
	0xa5, 0xf9, 0x8c, 0x26, 0x10, 0xde, 0x02, 0xdb, 0xda, 0x18, 0xc8, 0xcc, 0x2f, 0x63, 0x57, 0xf4,
	0x85, 0x60, 0xf2, 0x5c, 0xe0, 0x12, 0xae, 0x76, 0x7a, 0x33, 0x3b, 0x6d, 0x42, 0x77, 0xd9, 0x17,
	0xa2, 0x96, 0xa7, 0xcc, 0x1d, 0xd4, 0xe9, 0xfa, 0x89, 0x58, 0xff, 0x45, 0xac, 0xf1, 0x06, 0x9a,
	0x40, 0x8a, 0x62, 0x06, 0x30, 0x79, 0x4c, 0x88, 0x50, 0x8d, 0x8a, 0x54, 0x57, 0xf6, 0x85, 0x58,
	0xc8, 0x74, 0x1f, 0x48, 0xf4, 0x3e, 0x99, 0x40, 0x6a, 0xf2, 0x5d, 0x95, 0x49, 0xa7, 0x82, 0xbf,
	0x02, 0xcb, 0xe6, 0xde, 0xee, 0xff, 0xf1, 0xbe, 0x83, 0xc6, 0x67, 0xeb, 0xb2, 0x2f, 0x45, 0xbb,
	0x5a, 0x0c, 0x79, 0x89, 0x24, 0x2c, 0x8f, 0x6f, 0xab, 0x07, 0x60, 0xcf, 0x46, 0xd9, 0xc7, 0x37,
	0xb3, 0xfd, 0xc0, 0x01, 0xaa, 0x03, 0x1d, 0xf1, 0xfb, 0xeb, 0x79, 0xa4, 0xe5, 0xf5, 0xaf, 0xce,
	0xdb, 0x3d, 0xbf, 0xd0, 0x4d, 0x5a, 0xf5, 0xfe, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x7c, 0xbb,
	0xb4, 0x64, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HealCheckClient is the client API for HealCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealCheckClient interface {
	// Ask for all available reports
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullReply, error)
}

type healCheckClient struct {
	cc *grpc.ClientConn
}

func NewHealCheckClient(cc *grpc.ClientConn) HealCheckClient {
	return &healCheckClient{cc}
}

func (c *healCheckClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullReply, error) {
	out := new(PullReply)
	err := c.cc.Invoke(ctx, "/dbmon.HealCheck/Pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealCheckServer is the server API for HealCheck service.
type HealCheckServer interface {
	// Ask for all available reports
	Pull(context.Context, *PullRequest) (*PullReply, error)
}

// UnimplementedHealCheckServer can be embedded to have forward compatible implementations.
type UnimplementedHealCheckServer struct {
}

func (*UnimplementedHealCheckServer) Pull(ctx context.Context, req *PullRequest) (*PullReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}

func RegisterHealCheckServer(s *grpc.Server, srv HealCheckServer) {
	s.RegisterService(&_HealCheck_serviceDesc, srv)
}

func _HealCheck_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealCheckServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbmon.HealCheck/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealCheckServer).Pull(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HealCheck_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dbmon.HealCheck",
	HandlerType: (*HealCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pull",
			Handler:    _HealCheck_Pull_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbmon.proto",
}
